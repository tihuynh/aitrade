import os
import json
import numpy as np
import pandas as pd
import time
import ta.volatility
from ta.trend import SMAIndicator, EMAIndicator, MACD
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands
from pybit.unified_trading import HTTP
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense, Input
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Dropout

# ===== C·∫§U H√åNH CH·∫æ ƒê·ªò CH·∫†Y BOT =====
TESTNET_MODE = False  # True: Testnet, False: Real Market
print(f"üöÄ ƒêang ch·∫°y ·ªü ch·∫ø ƒë·ªô: {'TESTNET' if TESTNET_MODE else 'REAL MARKET'}")
if TESTNET_MODE:
    API_KEY = "BIpG5vVt41fsIEUcQe"
    API_SECRET = "pVfG0mafX1ey8clN6quZqTI4EZvkrQgeoziX"
    testnet = True
    model_file = "models/testnet/ai_model.keras"  # Model ri√™ng cho Testnet
    data_file = "data/testnet/data.json"  # D·ªØ li·ªáu ri√™ng cho Testnet
else:
    API_KEY = "Hm5gG0HKbm5MDo5bpo"
    API_SECRET = "D6iP8YwCisA8pUylvh6916rnvWxoyKQnq1jp"
    testnet = False
    model_file = "models/real/ai_model.keras"  # Model ri√™ng cho t√†i kho·∫£n th·∫≠t
    data_file = "data/real/data.json"  # D·ªØ li·ªáu ri√™ng cho t√†i kho·∫£n th·∫≠t

# ===== T·∫†O C√ÅC TH∆Ø M·ª§C N·∫æU CH∆ØA T·ªíN T·∫†I =====
os.makedirs(os.path.dirname(model_file), exist_ok=True)
os.makedirs(os.path.dirname(data_file), exist_ok=True)

# ===== K·∫æT N·ªêI API BYBIT =====
session = HTTP(api_key=API_KEY, api_secret=API_SECRET, testnet=testnet)


#
# ===== H√ÄM L·∫§Y D·ªÆ LI·ªÜU GI√Å V√Ä T√çNH INDICATORS =====
def fetch_data_with_indicators(symbol="BTCUSDT", timeframe="60", limit=2000):
    response = session.get_kline(category="spot", symbol=symbol, interval=timeframe, limit=limit)
    data = response["result"]["list"]
    df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close", "volume", "quote_volume"])
    df = df.sort_values("timestamp")

    # Chuy·ªÉn d·ªØ li·ªáu sang float
    for col in ["open", "high", "low", "close", "volume"]:
        df[col] = df[col].astype(float)

    # T√≠nh c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
    # ghi ch√∫ : sma_indicator c·ªßa th∆∞ vi·ªán ta chuy√™n d√πng t√≠nh to√°n c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t, window = 14 s·∫Ω ch·ªâ d√πng cho trade trong ng√†y n·∫øu mu·ªën trade d√†i h∆°n ph·∫£i tƒÉng s·ªë n·∫øn l√™n
    df["sma"] = ta.trend.sma_indicator(df["close"], window=14)
    df["ema"] = ta.trend.ema_indicator(df["close"], window=14)
    #macd = ta.trend.macd(df["close"])
    #df["macd"] = macd
    #df["macd_signal"] = ta.trend.macd_signal(df["close"])
    macd = ta.trend.MACD(df["close"])
    df["macd"] = macd.macd()
    df["macd_signal"] = macd.macd_signal()
    df["macd_diff"] = macd.macd_diff()

    df["rsi"] = ta.momentum.rsi(df["close"], window=14)
    bb = ta.volatility.BollingerBands(df["close"], window=20)
    df["bb_bbm"] = bb.bollinger_mavg()
    df["bb_bbh"] = bb.bollinger_hband()
    df["bb_bbl"] = bb.bollinger_lband()

    # T√≠nh th√™m ATR ƒë·ªÉ ƒë∆∞a v√†o feature
    atr = ta.volatility.AverageTrueRange(
        high=df["high"],
        low=df["low"],
        close=df["close"],
        window=14
    )
    df["atr"] = atr.average_true_range()

    # Lo·∫°i b·ªè NaN sau khi t√≠nh ch·ªâ b√°o
    df.dropna(inplace=True)
    return df

# ===== H√ÄM HU·∫§N LUY·ªÜN M√î H√åNH LSTM =====
def train_lstm_model(df):
    feature_cols = [
        "close", "sma", "ema", "macd", "macd_signal",
        "macd_diff", "rsi", "bb_bbm", "bb_bbh", "bb_bbl", "atr"
    ]

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(df[feature_cols])

    # Chia d·ªØ li·ªáu train/test
    split_index = int(len(scaled_data) * 0.8)
    train_data = scaled_data[:split_index]
    test_data = scaled_data[split_index:]

    X_train, y_train = [], []
    LOOKBACK = 100
    for i in range(LOOKBACK, len(train_data)):
        X_train.append(train_data[i-LOOKBACK:i])
        y_train.append(train_data[i][0])

    X_train, y_train = np.array(X_train), np.array(y_train)

    model = Sequential()
    model.add(Input(shape=(LOOKBACK, len(feature_cols))))
    model.add(LSTM(50, return_sequences=True))
    model.add(Dropout(0.2))
    model.add(LSTM(50))
    model.add(Dropout(0.2))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')

    # D√πng EarlyStopping ƒë·ªÉ tr√°nh overfitting
    early_stop = EarlyStopping(monitor='loss', patience=5, restore_best_weights=True)
    model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=1, callbacks=[early_stop])

    return model, scaler

def validate_data(data):
    """Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi s·ª≠ d·ª•ng"""
    if data is None or data.empty:
        print("‚ùå L·ªói: D·ªØ li·ªáu API tr·∫£ v·ªÅ r·ªóng!")
        return False

    """Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ h·ª£p l·ªá kh√¥ng tr∆∞·ªõc khi hu·∫•n luy·ªán/d·ª± ƒëo√°n"""
    required_columns = ["timestamp", "open", "high", "low", "close"]
    if not all(col in data.columns for col in required_columns):
        print("‚ùå D·ªØ li·ªáu thi·∫øu c·ªôt c·∫ßn thi·∫øt.")
        return False

    # √âp ki·ªÉu float cho c√°c c·ªôt c·∫ßn thi·∫øt
    data["high"] = data["high"].astype(float)
    data["low"] = data["low"].astype(float)
    data["close"] = data["close"].astype(float)

    if not data["timestamp"].is_monotonic_increasing:
        print("‚ö†Ô∏è C·∫£nh b√°o: D·ªØ li·ªáu kh√¥ng theo th·ª© t·ª± th·ªùi gian!")
        return False

    # Ki·ªÉm tra s·ª± bi·∫øn ƒë·ªông gi√°
    data["price_range"] = data["high"] - data["low"]
    if (data["price_range"] == 0).sum() > 3:
        print("‚ö†Ô∏è C·∫£nh b√°o: C√≥ nhi·ªÅu n·∫øn kh√¥ng dao ƒë·ªông! D·ªØ li·ªáu c√≥ th·ªÉ sai.")
        return False

    duplicate_rows = data.duplicated(subset=["timestamp"]).sum()
    if duplicate_rows > 0:
        print(f"‚ö†Ô∏è C·∫£nh b√°o: C√≥ {duplicate_rows} d√≤ng d·ªØ li·ªáu tr√πng timestamp!")

    data["price_range"] = data["high"] - data["low"]
    if data["price_range"].max() > 10000:  # N·∫øu ch√™nh l·ªách gi√° l·ªõn h∆°n 10,000 USDT
        print("‚ö†Ô∏è C·∫£nh b√°o: C√≥ s·ª± bi·∫øn ƒë·ªông gi√° b·∫•t th∆∞·ªùng trong d·ªØ li·ªáu!")

    return True  # N·∫øu d·ªØ li·ªáu h·ª£p l·ªá

# ===== H√ÄM KI·ªÇM TRA & LOAD MODEL =====
def get_model():
    feature_cols = ["close", "sma", "ema", "macd", "macd_signal", "macd_diff", "rsi", "bb_bbm", "bb_bbh", "bb_bbl", "atr"]
    LOOKBACK = 100

    print(f"üîπ ƒêang ki·ªÉm tra m√¥ h√¨nh t·ª´ {model_file}")
    data = fetch_data_with_indicators()
    if not validate_data(data):
        raise ValueError("‚ùå D·ªØ li·ªáu l·ªãch s·ª≠ kh√¥ng h·ª£p l·ªá!")

    # T·∫°o scaler m·ªõi t·ª´ d·ªØ li·ªáu m·ªõi
    scaler = MinMaxScaler()
    scaler.fit(data[feature_cols])

    if os.path.exists(model_file):
        try:
            model = load_model(model_file)
            input_shape = model.input_shape  # (None, 100, 11)
            expected_shape = (None, LOOKBACK, len(feature_cols))

            if input_shape != expected_shape:
                print("‚ö†Ô∏è M√¥ h√¨nh c≈© kh√¥ng kh·ªõp shape m·ªõi, s·∫Ω hu·∫•n luy·ªán l·∫°i...")
                raise ValueError("Shape mismatch")

            print("‚úÖ M√¥ h√¨nh c≈© h·ª£p l·ªá, d√πng l·∫°i.")
            return model, scaler

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi load m√¥ h√¨nh c≈©: {e}")
            print("üöÄ ƒêang hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh m·ªõi...")

    else:
        print("üöÄ Ch∆∞a c√≥ m√¥ h√¨nh, hu·∫•n luy·ªán m·ªõi...")

    # N·∫øu model kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói, train l·∫°i
    model, scaler = train_lstm_model(data)
    model.save(model_file)
    print(f"üíæ ƒê√£ l∆∞u m√¥ h√¨nh m·ªõi t·∫°i {model_file}")
    return model, scaler

# ===== H√ÄM D·ª∞ ƒêO√ÅN GI√Å =====
def predict_price(model, scaler, df):
    feature_cols = ["close", "sma", "ema", "macd", "macd_signal",
                    "macd_diff", "rsi", "bb_bbm", "bb_bbh", "bb_bbl", "atr"]

    LOOKBACK = 100  # ph·∫£i kh·ªõp v·ªõi l√∫c train

    scaled_data = scaler.transform(df[feature_cols])

    # L·∫•y chu·ªói 100 n·∫øn cu·ªëi
    last_sequence = np.array(scaled_data[-LOOKBACK:])  # shape: (100, 11)
    last_sequence = last_sequence.reshape(1, LOOKBACK, len(feature_cols))  # shape: (1, 100, 11)

    prediction = model.predict(last_sequence)

    # Gh√©p th√™m c·ªôt 0s ƒë·ªÉ inverse_transform ƒë√∫ng shape (1, 11)
    dummy = np.zeros((1, len(feature_cols)))
    dummy[0][0] = prediction[0][0]
    predicted_close = scaler.inverse_transform(dummy)[0][0]

    return predicted_close

def get_min_order_values():
    """L·∫•y th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng v√† gi√° tr·ªã t·ªëi thi·ªÉu c·ªßa c·∫∑p BTCUSDT"""
    try:
        response = session.get_instruments_info(category="spot", symbol="BTCUSDT")

        # In to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra key n√†o ƒë√∫ng
        print(f"üîç DEBUG - API Response: {response}")

        if "result" not in response or "list" not in response["result"] or not response["result"]["list"]:
            raise ValueError ("API ko hop le")
        info = response["result"]["list"][0]  # L·∫•y th√¥ng tin c·ªßa c·∫∑p BTCUSDT
        min_qty = float(info.get("minOrderQty", 0))  # D√πng .get() ƒë·ªÉ tr√°nh KeyError
        min_value = float(info.get("minOrderValue", 10))  # D√πng .get() ƒë·ªÉ tr√°nh KeyError

        print(f"üîç DEBUG - Min BTC Order Qty: {min_qty}, Min Order Value: {min_value}")
        return min_qty, min_value
    except Exception as e:
        print(f"loi khi lay thong tin min order: {e}")
        return 0.00001, 10

# ===== H√ÄM ƒê·∫∂T L·ªÜNH =====
open_orders = []  # Danh s√°ch l∆∞u c√°c l·ªánh mua ƒëang m·ªü
def place_order(side, order_value, predict_price=None):
    """ƒê·∫∑t l·ªánh mua/b√°n tr√™n Bybit"""
    try:
        min_btc, min_usdt = get_min_order_values()  # L·∫•y gi√° tr·ªã t·ªëi thi·ªÉu
        if order_value < min_usdt:
            order_value = min_usdt # ƒêi·ªÅu ch·ªânh order_value ƒë·ªÉ >= min_usdt
        data = fetch_data_with_indicators()
        if not validate_data(data):
            raise ValueError("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! H·ªßy l·ªánh.")
        last_price = data["close"].iloc[-1]  # L·∫•y gi√° BTC m·ªõi nh·∫•t
        if side == "Buy":
            qty = str(round(order_value, 6))  # Mua ‚Üí `qty` l√† s·ªë USDT
            tp = round(predict_price, 2) if predict_price else round(last_price * 1.02)
            sl = round(last_price * 0.98, 2)  # Take-Profit = +3 ATR

            # ƒê·∫∑t l·ªánh Market Buy
            order = session.place_order(
                category="spot",
                symbol="BTCUSDT",
                side=side,
                orderType="Market",
                qty=qty
            )

            print(f"‚úÖ ƒê√£ ƒë·∫∑t l·ªánh Mua {order_value:.2f} USDT")
            print(f"üéØ Take-Profit t·∫°i: {take_profit}, ‚õî Stop-Loss t·∫°i: {stop_loss}")

            # L∆∞u l·ªánh v√†o danh s√°ch ƒë·ªÉ theo d√µi TP/SL
            open_orders.append({"entry_price": last_price, "tp": take_profit, "sl": stop_loss})
        else:  # Sell
            qty = str(round(order_value / last_price, 6))  # B√°n ‚Üí `qty` l√† s·ªë BTC
            # ƒê·∫∑t l·ªánh Market Sell
            order = session.place_order(
                category="spot",
                symbol="BTCUSDT",
                side=side,
                orderType="Market",
                qty=qty
            )
            print(f"‚úÖ ƒê√£ b√°n {qty} BTC")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi ƒë·∫∑t l·ªánh: {e}")


#===== H√ÄM CH·∫†Y BOT =====
def run_bot():
    """Ch·∫°y bot AI v·ªõi m√¥i tr∆∞·ªùng Testnet ho·∫∑c Real Market"""
    global open_orders
    model, scaler = get_model()

    while True:
        data = fetch_data_with_indicators()
        if not validate_data(data):
            print("‚õî D·ªØ li·ªáu l·ªói, b·ªè qua v√≤ng l·∫∑p n√†y.")
            time.sleep(900)
            continue
        predicted_price = predict_price(model, scaler, data)
        last_close = data["close"].iloc[-1]

        # Ki·ªÉm tra n·∫øu c√≥ l·ªánh m·ªü, xem c√≥ ƒë·∫°t TP ho·∫∑c SL kh√¥ng
        for order in open_orders[:]:  # Duy·ªát qua danh s√°ch l·ªánh m·ªü
            if last_close >= order["tp"]:
                print(f"‚úÖ Ch·∫°m Take-Profit! Gi√° {order['entry_price']} ‚Üí {order['tp']}")
                place_order("Sell", 10)  # B√°n BTC ƒë·ªÉ ch·ªët l·ªùi
                open_orders.remove(order)

            elif last_close <= order["sl"]:
                print(f"‚õî Ch·∫°m Stop-Loss! Gi√° {order['entry_price']} ‚Üí {order['sl']}")
                place_order("Sell", 10)  # B√°n BTC ƒë·ªÉ c·∫Øt l·ªó
                open_orders.remove(order)

        # N·∫øu kh√¥ng c√≥ l·ªánh m·ªü, ƒë·∫∑t l·ªánh m·ªõi theo AI
        if not open_orders:
            if predicted_price > last_close * 1.005:
                place_order("Buy", 10)  # Mua BTC n·∫øu gi√° d·ª± ƒëo√°n tƒÉng 0.5%

        # L∆∞u d·ªØ li·ªáu gi√° v√†o file ƒë·ªÉ ph√¢n t√≠ch sau
        with open(data_file, "w") as f:
            json.dump(data.to_dict(), f)

        print(f"üìä Gi√° d·ª± ƒëo√°n: {predicted_price:.2f}, Gi√° hi·ªán t·∫°i: {last_close:.2f}")
        print(f"üîÑ Ch·ªù 15 ph√∫t tr∆∞·ªõc khi giao d·ªãch ti·∫øp...")
        time.sleep(900)

# ===== CH·∫†Y BOT =====
run_bot()
