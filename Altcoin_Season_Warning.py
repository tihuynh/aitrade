# ======================================
# üìä Bot Altcoin Season - Ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng + G·ª≠i Telegram
# ======================================

import requests
import datetime
import time
import os
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN_ALTCOIN_SEASON")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID_ALTCOIN_SEASON")

# H√†m g·ª≠i b√°o c√°o qua Telegram
def send_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"L·ªói g·ª≠i Telegram: {e}")

# H√†m l·∫•y d·ªØ li·ªáu t·ª´ TradingView ho·∫∑c ngu·ªìn thay th·∫ø
def get_index_data():
    try:
        # DXY t·ª´ Yahoo Finance
        import yfinance as yf
        dxy = yf.Ticker("DX-Y.NYB")
        hist = dxy.history(period="1d")
        dxy_value = hist['Close'].iloc[-1] if not hist.empty else None

        # C√°c ch·ªâ s·ªë crypto t·ª´ CoinGecko
        response = requests.get("https://api.coingecko.com/api/v3/global").json()
        btc_d = response['data']['market_cap_percentage']['btc']
        eth_d = response['data']['market_cap_percentage']['eth']
        total_market_cap = response['data']['total_market_cap']['usd']
        total2 = total_market_cap * (100 - btc_d) / 100
        total3 = total2 * (100 - eth_d) / 100
        others_d = 100 - btc_d - eth_d

        return {
            "DXY": round(dxy_value, 3),
            "BTC.D": round(btc_d, 2),
            "ETH.D": round(eth_d, 2),
            "OTHERS.D": round(others_d, 2),
            "TOTAL2": round(total2 / 1e9, 2),   # Bn USD
            "TOTAL3": round(total3 / 1e9, 2)    # Bn USD
        }

    except Exception as e:
        error_msg = f"‚ùå L·ªói trong make_decision: {e}"
        send_telegram(error_msg)
        print(error_msg)
        return None


# H√†m ƒë·ªçc d·ªØ li·ªáu h√¥m qua t·ª´ file log (n·∫øu c√≥)
def load_yesterday_data():
    try:
        if not os.path.exists("logs/altseason_log.csv"):
            return None  # Kh√¥ng c√≥ file -> return lu√¥n
        with open("logs/altseason_log.csv", "r") as f:
            lines = f.readlines()
            if len(lines) < 2:
                return None
            last_line = lines[-1].strip().split(',')
            return {
                "date": last_line[0],
                "DXY": float(last_line[1]),
                "BTC.D": float(last_line[2]),
                "ETH.D": float(last_line[3]),
                "OTHERS.D": float(last_line[4]),
                "TOTAL2": float(last_line[5]),
                "TOTAL3": float(last_line[6])
            }
    except Exception as e:
        error_msg = f"‚ùå L·ªói trong make_decision: {e}"
        send_telegram(error_msg)
        print(error_msg)
        return None

# H√†m l∆∞u d·ªØ li·ªáu h√¥m nay v√†o file log
def save_today_data(today_data, score):
    try:
        os.makedirs("logs", exist_ok=True)
        with open("logs/altseason_log.csv", "a") as f:
            line = f"{datetime.date.today()},{today_data['DXY']},{today_data['BTC.D']},{today_data['ETH.D']},{today_data['OTHERS.D']},{today_data['TOTAL2']},{today_data['TOTAL3']},{score}\n"
            f.write(line)
    except Exception as e:
        error_msg = f"‚ùå L·ªói ghi log h√¥m nay: {e}"
        send_telegram(error_msg)
        print(error_msg)

# H√†m ph√¢n t√≠ch xu h∆∞·ªõng

def analyze_trend(today, yesterday):
    try:
        def emoji_and_note(key, change):
            is_positive = {
                "DXY": change < 0,
                "BTC.D": change < 0,
                "ETH.D": change > 0,
                "OTHERS.D": change > 0,
                "TOTAL2": change > 0,
                "TOTAL3": change > 0
            }
            note = "‚úÖ (t·ªët cho Altcoin)" if is_positive[key] else "‚ö†Ô∏è (x·∫•u cho Altcoin)"
            emoji = "‚úÖ" if is_positive[key] else "‚ö†Ô∏è"
            return emoji, note

        changes = {
            "DXY": today["DXY"] - yesterday["DXY"],
            "BTC.D": today["BTC.D"] - yesterday["BTC.D"],
            "ETH.D": today["ETH.D"] - yesterday["ETH.D"],
            "OTHERS.D": today["OTHERS.D"] - yesterday["OTHERS.D"],
            "TOTAL2": (today["TOTAL2"] - yesterday["TOTAL2"]) / yesterday["TOTAL2"] * 100,
            "TOTAL3": (today["TOTAL3"] - yesterday["TOTAL3"]) / yesterday["TOTAL3"] * 100,
        }

        message = "*üìä D·ª± b√°o xu h∆∞·ªõng Crypto h√¥m nay:*\n\n"
        for key in ["DXY", "BTC.D", "ETH.D", "OTHERS.D", "TOTAL2", "TOTAL3"]:
            emoji, note = emoji_and_note(key, changes[key])
            unit = "%" if key.endswith("D") else "%"
            value = f"{today[key]:.2f}"
            delta = f"{changes[key]:+.2f}{unit}"
            label = key.replace(".", " Dominance").replace("TOTAL2", "TOTAL2").replace("TOTAL3", "TOTAL3")
            message += f"{emoji} {label}: {value}{unit} ({delta}) {note}\n"

        message += "\n"

        # Ch·∫•m ƒëi·ªÉm xu h∆∞·ªõng Altcoin Season
        score = 0
        if changes['DXY'] < 0: score += 1
        if changes['BTC.D'] < 0: score += 1
        if changes['ETH.D'] > 0: score += 1
        if changes['OTHERS.D'] > 0: score += 1
        if changes['TOTAL2'] > 0: score += 1
        if changes['TOTAL3'] > 0: score += 1

        if score >= 5:
            message += "üî• *Altcoin Season m·∫°nh!* C√≥ th·ªÉ gi·∫£i ng√¢n m·∫°nh v√†o Altcoin ti·ªÅm nƒÉng.\n"
        elif score >= 3:
            message += "‚ú® *T√≠n hi·ªáu t√≠ch c·ª±c nh·∫π cho Altcoin.* C√¢n nh·∫Øc gi·∫£i ng√¢n 10‚Äì30%.\n"
        else:
            message += "üí§ *Th·ªã tr∆∞·ªùng ch∆∞a r√µ r√†ng.* N√™n quan s√°t th√™m, ch∆∞a v·ªôi gi·∫£i ng√¢n.\n"

        message += f"\n*Score Altcoin Season h√¥m nay: {score}/6*"

        return message

    except Exception as e:
        error_msg = f"‚ùå L·ªói trong make_decision: {e}"
        send_telegram(error_msg)
        print(error_msg)
def emoji_and_note(key, change):
    is_good = (
        (key == "DXY" and change < 0) or
        (key == "BTC.D" and change < 0) or
        (key == "ETH.D" and change > 0) or
        (key == "OTHERS.D" and change > 0) or
        (key == "TOTAL2" and change > 0) or
        (key == "TOTAL3" and change > 0)
    )
    emoji = "‚úÖ" if is_good else "‚ö†Ô∏è"
    note = "‚úÖ (t·ªët cho Altcoin)" if is_good else "‚ö†Ô∏è (x·∫•u cho Altcoin)"
    return emoji, note

def calculate_score(today, yesterday):
    try:
        score = 0
        if today["DXY"] < yesterday["DXY"]: score += 1
        if today["BTC.D"] < yesterday["BTC.D"]: score += 1
        if today["ETH.D"] > yesterday["ETH.D"]: score += 1
        if today["OTHERS.D"] > yesterday["OTHERS.D"]: score += 1
        if today["TOTAL2"] > yesterday["TOTAL2"]: score += 1
        if today["TOTAL3"] > yesterday["TOTAL3"]: score += 1
        return score
    except Exception as e:
        error_msg = f"‚ùå L·ªói trong make_decision: {e}"
        send_telegram(error_msg)
        print(error_msg)

# =============================
# Ch·∫°y bot m·ªói s√°ng
# =============================
if __name__ == '__main__':
    try:
        today_data = get_index_data()
        yesterday_data = load_yesterday_data()

        if yesterday_data:
            report = analyze_trend(today_data, yesterday_data)
            send_telegram(report)
        else:
            send_telegram("üìå Bot kh·ªüi t·∫°o d·ªØ li·ªáu th·ªã tr∆∞·ªùng. B√°o c√°o ƒë·∫ßy ƒë·ªß s·∫Ω b·∫Øt ƒë·∫ßu t·ª´ ng√†y mai.")

        score = calculate_score(today_data, yesterday_data) if yesterday_data else 0
        save_today_data(today_data, score)

    except Exception as e:
        error_msg = f"‚ùå L·ªói trong make_decision: {e}"
        send_telegram(error_msg)
        print(error_msg)
