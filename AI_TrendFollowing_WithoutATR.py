import os
import json
import numpy as np
import pandas as pd
import time
from pybit.unified_trading import HTTP
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

# ===== C·∫§U H√åNH CH·∫æ ƒê·ªò CH·∫†Y BOT =====
TESTNET_MODE = True  # True: Testnet, False: Real Market

if TESTNET_MODE:
    API_KEY = "BIpG5vVt41fsIEUcQe"
    API_SECRET = "pVfG0mafX1ey8clN6quZqTI4EZvkrQgeoziX"
    testnet = True
    model_file = "ai_model_testnet.h5"  # Model ri√™ng cho Testnet
    data_file = "data_testnet.json"  # D·ªØ li·ªáu ri√™ng cho Testnet
else:
    API_KEY = "your_real_api_key"
    API_SECRET = "your_real_api_secret"
    testnet = False
    model_file = "ai_model_real.h5"  # Model ri√™ng cho t√†i kho·∫£n th·∫≠t
    data_file = "data_real.json"  # D·ªØ li·ªáu ri√™ng cho t√†i kho·∫£n th·∫≠t

# ===== X√ìA MODEL C≈® KHI CHUY·ªÇN T·ª™ TESTNET SANG REAL MARKET =====
if not TESTNET_MODE:
    if os.path.exists("ai_model_testnet.h5"):
        os.remove("ai_model_testnet.h5")  # X√≥a model c≈© c·ªßa Testnet
    if os.path.exists("data_testnet.json"):
        os.remove("data_testnet.json")  # X√≥a d·ªØ li·ªáu c≈© c·ªßa Testnet
    print("‚ö†Ô∏è ƒê√£ chuy·ªÉn sang th·ªã tr∆∞·ªùng th·ª±c - X√≥a d·ªØ li·ªáu AI c≈©, c·∫ßn hu·∫•n luy·ªán l·∫°i!")

# ===== K·∫æT N·ªêI API BYBIT =====
session = HTTP(api_key=API_KEY, api_secret=API_SECRET, testnet=testnet)
# ===== H√ÄM L·∫§Y D·ªÆ LI·ªÜU GI√Å =====
def fetch_historical_data(symbol="BTCUSDT", timeframe="60", limit=500):
    """L·∫•y d·ªØ li·ªáu gi√° t·ª´ Bybit (Testnet ho·∫∑c Real Market)"""
    response = session.get_kline(category="spot", symbol=symbol, interval=timeframe, limit=limit)
    data = response["result"]["list"]
    print(f"üîç DEBUG - D·ªØ li·ªáu API tr·∫£ v·ªÅ:\n{data[:3]}")  # In 3 d√≤ng ƒë·∫ßu ƒë·ªÉ ki·ªÉm tra format
    df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close", "volume", "quote_volume"])
    df["close"] = df["close"].astype(float)
    return df

# ===== H√ÄM HU·∫§N LUY·ªÜN M√î H√åNH LSTM =====
def train_lstm_model(data):
    """Hu·∫•n luy·ªán AI d·ª± ƒëo√°n gi√°"""
    scaler = MinMaxScaler(feature_range=(0,1))
    scaled_data = scaler.fit_transform(data["close"].values.reshape(-1,1))

    X_train, y_train = [], []
    LOOKBACK = 50
    for i in range(len(scaled_data) - LOOKBACK):
        X_train.append(scaled_data[i:i+LOOKBACK])
        y_train.append(scaled_data[i+LOOKBACK])

    X_train, y_train = np.array(X_train), np.array(y_train)

    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))
    model.add(LSTM(units=50))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(X_train, y_train, epochs=10, batch_size=16, verbose=0)

    return model, scaler

# ===== H√ÄM KI·ªÇM TRA & LOAD MODEL =====
def get_model():
    """Ki·ªÉm tra v√† load model ph√π h·ª£p"""
    if os.path.exists(model_file):
        print(f"üîπ ƒêang t·∫£i m√¥ h√¨nh t·ª´ {model_file}")
        model = load_model(model_file)

        # Fit l·∫°i scaler v·ªõi d·ªØ li·ªáu m·ªõi tr∆∞·ªõc khi d√πng
        data = fetch_historical_data()
        scaler = MinMaxScaler(feature_range=(0, 1))
        scaler.fit(data["close"].values.reshape(-1, 1))  # Fit scaler v·ªõi d·ªØ li·ªáu m·ªõi
        return model, scaler
    else:
        print("üöÄ Ch∆∞a c√≥ m√¥ h√¨nh, ƒëang hu·∫•n luy·ªán m·ªõi!")
        data = fetch_historical_data()
        model, scaler = train_lstm_model(data)
        model.save(model_file)
        return model, scaler

# ===== H√ÄM D·ª∞ ƒêO√ÅN GI√Å =====
def predict_trend(model, scaler, data):
    """D·ª± ƒëo√°n gi√° d·ª±a v√†o AI"""
    scaled_data = scaler.transform(data["close"].values.reshape(-1,1))
    last_sequence = np.array([scaled_data[-50:]])
    prediction = model.predict(last_sequence)
    return scaler.inverse_transform(prediction)[0][0]


def get_min_order_values():
    """L·∫•y th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng v√† gi√° tr·ªã t·ªëi thi·ªÉu c·ªßa c·∫∑p BTCUSDT"""
    response = session.get_instruments_info(category="spot", symbol="BTCUSDT")

    # In to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra key n√†o ƒë√∫ng
    print(f"üîç DEBUG - API Response: {response}")

    info = response["result"]["list"][0]  # L·∫•y th√¥ng tin c·ªßa c·∫∑p BTCUSDT
    min_qty = float(info.get("minOrderQty", 0))  # D√πng .get() ƒë·ªÉ tr√°nh KeyError
    min_value = float(info.get("minOrderValue", 10))  # D√πng .get() ƒë·ªÉ tr√°nh KeyError

    print(f"üîç DEBUG - Min BTC Order Qty: {min_qty}, Min Order Value: {min_value}")
    return min_qty, min_value


# ===== H√ÄM ƒê·∫∂T L·ªÜNH =====
open_orders = []  # Danh s√°ch l∆∞u c√°c l·ªánh mua ƒëang m·ªü
def place_order(side, order_value):
    """ƒê·∫∑t l·ªánh mua/b√°n tr√™n Bybit"""
    try:
        take_profit, stop_loss = 0, 0
        min_btc, min_usdt = get_min_order_values()  # L·∫•y gi√° tr·ªã t·ªëi thi·ªÉu
        if order_value < min_usdt:
            order_value = min_usdt # ƒêi·ªÅu ch·ªânh order_value ƒë·ªÉ >= min_usdt
        last_price = float(fetch_historical_data().iloc[-1]["close"])  # L·∫•y gi√° BTC m·ªõi nh·∫•t
        if side == "Buy":
            qty = str(round(order_value, 6))  # Mua ‚Üí `qty` l√† s·ªë USDT
        else:  # Sell
            qty = str(round(order_value / last_price, 6))  # B√°n ‚Üí `qty` l√† s·ªë BTC
        order = session.place_order(
            category="spot",
            symbol="BTCUSDT",
            side=side,
            orderType="Market",
            qty=qty
        )
        print(f"‚úÖ ƒê√£ ƒë·∫∑t l·ªánh {side} {qty} {'USDT' if side == 'Buy' else 'BTC'} (‚âà {order_value:.2f} USDT)")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi ƒë·∫∑t l·ªánh: {e}")


# ===== H√ÄM CH·∫†Y BOT =====
def run_bot():
    """Ch·∫°y bot AI v·ªõi m√¥i tr∆∞·ªùng Testnet ho·∫∑c Real Market"""
    model, scaler = get_model()

    while True:
        data = fetch_historical_data()
        predicted_price = predict_trend(model, scaler, data)
        last_close = data["close"].iloc[-1]
        if predicted_price > last_close * 1.005:
            place_order("Buy", 10)  # Mua 0.01 BTC n·∫øu gi√° tƒÉng 0.5%
        elif predicted_price < last_close * 0.995:
            place_order("Sell", 10)  # B√°n 0.01 BTC n·∫øu gi√° gi·∫£m 0.5%

        # L∆∞u d·ªØ li·ªáu gi√° v√†o file ƒë·ªÉ ph√¢n t√≠ch sau
        with open(data_file, "w") as f:
            json.dump(data.to_dict(), f)

        print(f"üìä Gi√° d·ª± ƒëo√°n: {predicted_price:.2f}, Gi√° hi·ªán t·∫°i: {last_close:.2f}")
        print(f"üîÑ Ch·ªù 15 ph√∫t tr∆∞·ªõc khi giao d·ªãch ti·∫øp...")
        time.sleep(900)

# ===== CH·∫†Y BOT =====
run_bot()
